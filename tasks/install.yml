---
- name: PROMETHEUS | Installing dependencies
  apt:
    pkg: "{{ required_libs }}"
    state: present

- name: PROMETHEUS | Ensure prometheus group
  group:
    name: "{{ prometheus_group }}"
    system: yes
    state: present

- name: PROMETHEUS | Ensure prometheus user
  user:
    name: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    system: yes
    shell: /usr/sbin/nologin
    createhome: no

- name: PROMETHEUS | Ensure skeleton paths
  file:
    dest: "{{ item }}"
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_user }}"
    state: directory
    mode: 0755
  with_items:
    - "{{ prometheus_root_path }}"
    - "{{ prometheus_bin_path }}"
    - "{{ prometheus_conf_path }}"
    - "{{ prometheus_conf_path }}/parts"
    - "{{ prometheus_conf_path }}/rules"
    - "{{ prometheus_data_path }}"
    - "{{ prometheus_log_path }}"
    - "{{ prometheus_tmp_path }}"
    - "{{ prometheus_tmp_path }}/parts"
    - "{{ prometheus_tmp_path }}/rules"

- name: PROMETHEUS | Check prometheus version
  command: prometheus --version
  register: prometheus_check
  changed_when: false
  ignore_errors: true

- name: PROMETHEUS | Obtain installed version
  set_fact:
    prometheus_installed_version: "{{ prometheus_version.startswith('2') | ternary(prometheus_check.stderr, prometheus_check.stdout) }}"
  when: prometheus_check is succeeded

- name: PROMETHEUS | Download package
  get_url:
    url: "{{ prometheus_url }}"
    dest: "/tmp/{{ prometheus_package }}"
  when: prometheus_force_reinstall or prometheus_check is failed or prometheus_installed_version is not search('prometheus, version ' + prometheus_version)

- name: PROMETHEUS | Extract package
  unarchive:
    copy: no
    src: "/tmp/{{ prometheus_package }}"
    dest: /tmp
  when: prometheus_force_reinstall or prometheus_check is failed or prometheus_installed_version is not search('prometheus, version ' + prometheus_version)

- name: PROMETHEUS | Copy binary
  copy:
    src: "/tmp/{{ prometheus_release_name }}/{{ item }}"
    dest: "{{ prometheus_bin_path }}/{{ item }}"
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    remote_src: True
    mode: 0755
  with_items:
    - prometheus
    - promtool
  when: prometheus_force_reinstall or prometheus_check is failed or prometheus_installed_version is not search('prometheus, version ' + prometheus_version)
  notify: restart prometheus

- name: PROMETHEUS | Link binary
  file:
    src: "{{ prometheus_bin_path }}/{{ item }}"
    dest: "/usr/bin/{{ item }}"
    state: link
  with_items:
    - prometheus
    - promtool

- name: PROMETHEUS | Copy Daemon script
  template:
    src: "{{ prometheus_service_template_path }}"
    dest: /lib/systemd/system/prometheus.service
    mode: 0644
  notify: restart prometheus
